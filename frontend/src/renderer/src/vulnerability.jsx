import React, { useState } from 'react';
import { ShieldCheck, CheckCircle } from 'lucide-react';

function Vulnerability() {
    const [version, setVersion] = useState('');
    const [isChecked, setIsChecked] = useState(false);
    
    async function check(version) {
        const apiKey = '3c99b420008748d7276cff6acc2c1adf8fcf6ac1dc85c20e388708f76fe42acc';

        try {
            const submitUrl = `https://www.virustotal.com/api/v3/urls`;
            const submitOptions = {
                method: 'POST',
                headers: {
                    'accept': 'application/json',
                    'x-apikey': apiKey,
                    'content-type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({ url: version })
            };

            const submitResponse = await fetch(submitUrl, submitOptions);
            if (!submitResponse.ok) throw new Error(`HTTP error! Status: ${submitResponse.status}`);

            const submitData = await submitResponse.json();
            const analysisId = submitData.data.id;

            // Step 2: Fetch analysis results
            const analysisUrl = `https://www.virustotal.com/api/v3/analyses/${analysisId}`;
            const analysisOptions = {
                method: 'GET',
                headers: {
                    'accept': 'application/json',
                    'x-apikey': apiKey
                }
            };

            const analysisResponse = await fetch(analysisUrl, analysisOptions);
            if (!analysisResponse.ok) throw new Error(`HTTP error! Status: ${analysisResponse.status}`);

            const analysisData = await analysisResponse.json();
            alert("Succsess")
            const stats = analysisData.data.attributes.stats;
            console.log(stats)

            const totalScans = stats.malicious + stats.suspicious + stats.harmless + stats.undetected;
            const score = totalScans > 0 
                ? Math.min(100, Math.round(((stats.malicious * 2 + stats.suspicious) / totalScans) * 100))
                : 0;
            console.log(score)

        } catch (error) {
            console.error("Error fetching data:", error);
            alert("An error occurred while checking vulnerabilities.");
        }
    }

    const handleCheckVersion = () => {
        if (version.trim() !== '') {
            alert(`Checking vulnerabilities for version: ${version}`);
            check(version);
            setIsChecked(true);
        } else {
            alert('Please enter a valid version to check.');
        }
    };

    return (
        <div className="p-0 w-full flex flex-col items-center justify-center h-screen overflow-hidden box-border">
            <div className="w-full max-w-2xl bg-white p-8 rounded-xl shadow-xl">
                <h1 className="text-4xl font-extrabold mb-8 text-center text-gray-800">
                    Vulnerability Checker
                </h1>

                <div className="mb-6 flex flex-col space-y-4">
                    <label className="border p-3 rounded-lg w-full shadow-sm focus:outline-none focus:ring-2 focus:ring-red-300 flex items-center justify-center bg-gray-100 hover:bg-gray-200">
                        <ShieldCheck className="mr-2 text-red-500" />
                        <input
                            type="text"
                            placeholder="Enter URL to Check"
                            value={version}
                            onChange={(e) => setVersion(e.target.value)}
                            className="w-full bg-transparent outline-none"
                        />
                    </label>
                </div>

                <button
                    onClick={handleCheckVersion}
                    className="mt-4 px-8 py-4 bg-blue-500 text-white text-2xl rounded-lg hover:bg-blue-600 transition-transform transform hover:scale-105 flex items-center justify-center"
                >
                    <CheckCircle className="mr-2" /> Check URL
                </button>

                {isChecked && (
                    <p className="mt-8 text-lg text-blue-600 font-semibold text-center">
                        Checking vulnerabilities for URL: {version}
                    </p>
                )}
            </div>
        </div>
    );
}

export default Vulnerability;
