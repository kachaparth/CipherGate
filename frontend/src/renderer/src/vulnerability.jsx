import React, { useState } from 'react';
import { ShieldCheck, CheckCircle } from 'lucide-react';
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';

function Vulnerability() {
    const [version, setVersion] = useState('');
    const [isChecking, setIsChecking] = useState(false);
    const [safetyPercentage, setSafetyPercentage] = useState(null);
    const [analysisDetails, setAnalysisDetails] = useState(null);

    async function check(version) {
        const apiKey = '3c99b420008748d7276cff6acc2c1adf8fcf6ac1dc85c20e388708f76fe42acc';

        try {
            setIsChecking(true);

            const submitUrl = `https://www.virustotal.com/api/v3/urls`;
            const submitOptions = {
                method: 'POST',
                headers: {
                    'accept': 'application/json',
                    'x-apikey': apiKey,
                    'content-type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({ url: version })
            };

            const submitResponse = await fetch(submitUrl, submitOptions);
            if (!submitResponse.ok) throw new Error(`HTTP error! Status: ${submitResponse.status}`);

            const submitData = await submitResponse.json();
            const analysisId = submitData.data.id;

            // Step 2: Fetch analysis results
            const analysisUrl = `https://www.virustotal.com/api/v3/analyses/${analysisId}`;
            const analysisOptions = {
                method: 'GET',
                headers: {
                    'accept': 'application/json',
                    'x-apikey': apiKey
                }
            };

            const analysisResponse = await fetch(analysisUrl, analysisOptions);
            if (!analysisResponse.ok) throw new Error(`HTTP error! Status: ${analysisResponse.status}`);

            const analysisData = await analysisResponse.json();
            const stats = analysisData.data.attributes.stats;

            // Calculate safety percentage
            const totalScans = stats.malicious + stats.suspicious + stats.harmless + stats.undetected;
            const undetectedPercentage = (stats.undetected / totalScans) * 100;
            const safePercentage = Math.max(0, Math.min(100, Math.round(100 - undetectedPercentage)));

            setSafetyPercentage(safePercentage);
            setAnalysisDetails(stats);
            setIsChecking(false);
            alert("Success");

        } catch (error) {
            console.error("Error fetching data:", error);
            alert("An error occurred while checking vulnerabilities.");
            setIsChecking(false);
        }
    }

    const handleCheckVersion = () => {
        if (version.trim() !== '') {
            alert(`Checking vulnerabilities for URL: ${version}`);
            check(version);
        } else {
            alert('Please enter a valid URL to check.');
        }
    };

    return (
        <div className="p-0 w-full flex flex-col items-center justify-center min-h-screen overflow-hidden box-border bg-gradient-to-br from-blue-100 to-blue-300">
            <div className="w-full max-w-3xl bg-white p-10 rounded-3xl shadow-2xl">
                <h1 className="text-5xl font-extrabold mb-10 text-center text-blue-900">
                    Vulnerability Checker
                </h1>

                <div className="mb-8 flex flex-col space-y-6">
                    <label className="border p-4 rounded-xl w-full shadow-lg focus:outline-none focus:ring-4 focus:ring-blue-400 flex items-center justify-center bg-gray-100 hover:bg-gray-200">
                        <ShieldCheck className="mr-3 text-blue-600" />
                        <input
                            type="text"
                            placeholder="Enter URL to Check"
                            value={version}
                            onChange={(e) => setVersion(e.target.value)}
                            className="w-full bg-transparent outline-none text-lg"
                        />
                    </label>
                </div>

                <button
                    onClick={handleCheckVersion}
                    className="mt-6 px-10 py-4 bg-blue-600 text-white text-2xl rounded-xl hover:bg-blue-700 transition-transform transform hover:scale-105 flex items-center justify-center"
                >
                    <CheckCircle className="mr-3" /> Check URL
                </button>

                {isChecking && (
                    <p className="mt-10 text-xl text-blue-800 font-semibold text-center animate-pulse">
                        Checking vulnerabilities for URL: {version}
                    </p>
                )}

                {safetyPercentage !== null && (
                    <div className="mt-12 flex flex-col items-center">
                        <div className="w-64 h-64">
                            <CircularProgressbar
                                value={safetyPercentage}
                                text={`${safetyPercentage}% Safe`}
                                styles={buildStyles({
                                    textColor: '#1E40AF',
                                    pathColor: '#2563EB',
                                    trailColor: '#93C5FD',
                                    textSize: '16px'
                                })}
                            />
                        </div>

                        <p className="mt-6 text-lg text-green-800 font-bold">
                            Your site is {safetyPercentage}% safe.
                        </p>

                        {analysisDetails && (
                            <div className="mt-8 p-6 w-full bg-gray-100 rounded-xl shadow-lg">
                                <h2 className="text-2xl font-bold mb-4">Analysis Details:</h2>
                                <pre className="text-sm text-gray-800 whitespace-pre-wrap break-words">
                                    {JSON.stringify(analysisDetails, null, 2)}
                                </pre>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
}

export default Vulnerability;